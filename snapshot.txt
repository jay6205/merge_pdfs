"
    This is a assignemnt project to merger pdfs files.
    The project uses django and bootstrap

===== INSTRUCTIONS FOR LLM =====
When analyzing this codebase:
1. Focus on the overall architecture and patterns
2. Identify potential improvements or bugs
3. Provide specific, actionable suggestions
4. Reference files by their relative paths when making comments

===== FILE LISTING BEGINS BELOW =====
Each file is delimited by markers showing its relative path.
Files are shown in alphabetical order within each directory.


===== BEGIN FILE: manage.py =====

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mergePDFS.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


===== END FILE: manage.py =====



===== BEGIN FILE: mergePDFS\__init__.py =====



===== END FILE: mergePDFS\__init__.py =====



===== BEGIN FILE: mergePDFS\asgi.py =====

"""
ASGI config for mergePDFS project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mergePDFS.settings')

application = get_asgi_application()


===== END FILE: mergePDFS\asgi.py =====



===== BEGIN FILE: mergePDFS\settings.py =====

"""
Django settings for mergePDFS project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3@3jbkg%x^5o%c(ycvf0eooqryp26%_cr!(r@g55igyr&((l2_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'merger'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mergePDFS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mergePDFS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


===== END FILE: mergePDFS\settings.py =====



===== BEGIN FILE: mergePDFS\urls.py =====

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('merger.urls')),
]


===== END FILE: mergePDFS\urls.py =====



===== BEGIN FILE: mergePDFS\wsgi.py =====

"""
WSGI config for mergePDFS project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mergePDFS.settings')

application = get_wsgi_application()


===== END FILE: mergePDFS\wsgi.py =====



===== BEGIN FILE: merger\apps.py =====



===== END FILE: merger\apps.py =====



===== BEGIN FILE: merger\forms.py =====

from django import forms

class PDFMergeForm(forms.Form):
    pdfs = forms.FileField(widget=forms.ClearableFileInput(attrs={'multiple': True}), required=True)


===== END FILE: merger\forms.py =====



===== BEGIN FILE: merger\urls.py =====

from django.urls import path
from .views import merge_pdfs

urlpatterns = [
    path('', merge_pdfs, name='merge_pdfs'),
]


===== END FILE: merger\urls.py =====



===== BEGIN FILE: merger\views.py =====

import tempfile
import json

from django.shortcuts import render
from django.http import FileResponse
from PyPDF2 import PdfMerger
from .forms import PDFMergeForm


def merge_pdfs(request):
    if request.method == "POST":
        form = PDFMergeForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_files = request.FILES.getlist("pdfs")
            file_order = json.loads(request.POST.get("file_order", "[]"))

            file_map = {f.name: f for f in uploaded_files}
            ordered_files = [file_map[name] for name in file_order if name in file_map]

            merger = PdfMerger()
            for f in ordered_files:
                merger.append(f)

            merged_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
            merger.write(merged_file)
            merger.close()
            merged_file.seek(0)

            return FileResponse(
                open(merged_file.name, "rb"), as_attachment=True, filename="merged.pdf"
            )

    else:
        form = PDFMergeForm()

    return render(request, "merger/merge.html", {"form": form})


===== END FILE: merger\views.py =====



===== BEGIN FILE: merger\templates\merger\merge.html =====

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>PDF Merger</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    #file-list {
      list-style: none;
      padding: 0;
    }
    #file-list li {
      padding: 10px;
      margin: 5px 0;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: move;
    }
    .drag-handle {
      cursor: grab;
      margin-right: 10px;
    }
    .filename {
      flex-grow: 1;
    }
  </style>
</head>
<body class="bg-light">
<div class="container mt-5">
  <h2 class="mb-4 text-center">Merge PDFs</h2>
  <form id="pdf-form" method="post">
    {% csrf_token %}
    <div class="input-group mb-3">
      <input type="file" class="form-control" id="pdf-input" accept="application/pdf">
      <button type="button" class="btn btn-outline-secondary" id="add-btn">Add PDF</button>
    </div>
    <ul id="file-list" class="mb-3"></ul>
    <button type="submit" class="btn btn-primary w-100">Merge PDFs</button>
  </form>
</div>

<script>
  const input = document.getElementById('pdf-input');
  const addBtn = document.getElementById('add-btn');
  const fileList = document.getElementById('file-list');
  const form = document.getElementById('pdf-form');
  let files = [];

  addBtn.addEventListener('click', () => {
    if (input.files.length === 0) return;
    const file = input.files[0];
    if (files.some(f => f.name === file.name)) {
      alert('File already added.');
      return;
    }
    files.push(file);
    renderList();
    input.value = '';
  });

  function renderList() {
    fileList.innerHTML = '';
    files.forEach((file, index) => {
      const li = document.createElement('li');
      li.setAttribute('draggable', true);
      li.dataset.index = index;
      li.innerHTML = `
        <span class="drag-handle">â˜°</span>
        <span class="filename">${file.name}</span>
        <button type="button" class="btn btn-sm btn-danger">Remove</button>
      `;
      fileList.appendChild(li);
    });

    fileList.querySelectorAll('.btn-danger').forEach((btn, index) => {
      btn.onclick = () => {
        files.splice(index, 1);
        renderList();
      };
    });
  }

  let dragged;

  fileList.addEventListener('dragstart', (e) => {
    dragged = e.target.closest('li').dataset.index;
  });

  fileList.addEventListener('dragover', (e) => {
    e.preventDefault();
  });

  fileList.addEventListener('drop', (e) => {
    e.preventDefault();
    const targetIndex = e.target.closest('li')?.dataset.index;
    if (targetIndex === undefined) return;
    const file = files.splice(dragged, 1)[0];
    files.splice(targetIndex, 0, file);
    renderList();
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData();
    files.forEach(f => formData.append('pdfs', f));
    formData.append('file_order', JSON.stringify(files.map(f => f.name)));

    const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;

    const response = await fetch('', {
      method: 'POST',
      headers: { 'X-CSRFToken': csrfToken },
      body: formData
    });

    if (response.ok) {
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'merged.pdf';
      a.click();
      URL.revokeObjectURL(url);
    } else {
      alert('Failed to merge PDFs');
    }
  });
</script>
</body>
</html>


===== END FILE: merger\templates\merger\merge.html =====

